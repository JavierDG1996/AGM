spacePattern=3
lineThickness=2
name=prueba1
vertexDiameter=40
shortPattern=1
nodeThickness=2
longPattern=3
===
agents
{
pitchNRoll ( off enabled )
yaw ( off enabled )
saccade ( off downwards frontal firstWall nextWall specific )
distance ( off floor wall maintenance )
unknownFinder ( off floor table )
}
configurations{ pitchAndRoll lookUnknownFloor heightBehavior lookPerpendicularFloor yaw lookFirstWall modelWall lookNextWall maintainWallDistances insertUnknownStuff obstaclesSaccade }
table
{
 enabled off     off       off         off
 enabled off     downwards off         off
 enabled off     off       floor       off
 enabled off     frontal   off         off
 enabled enabled off       off         off
 enabled enabled firstWall maintenance off
 off     enabled off       wall        off
 enabled enabled nextWall  maintenance off
 enabled enabled off       maintenance off
 enabled enabled off       maintenance floor
 enabled enabled specific  maintenance off
}
===
modelGravity : pitchAndRoll
{
	{
		s:start(40,40)
	}
	=>
	{
		g:gravity(180,40)
		gualzru:robot(40,40)
		gualzru->g(link)
	}
}

lookFloor : pitchAndRoll
{
	{
		g:gravity(170,40)
		gualzru:robot(40,40)
		gualzru->g(link)
	}
	=>
	{
		g:gravity(230,40)
		gualzru:robot(40,40)
		gualzru->g(lookTowards)
	}
}

modelHeight : pitchAndRoll
{
	{
		g:gravity(270,40)
		gualzru:robot(40,40)
		gualzru->g(lookTowards)
	}
	=>
	{
		g:plane(290,40)
		gualzru:robot(40,40)
		gualzru->g(lookTowards)
		gualzru->g(in)
	}
}

lookPerpendicularFloor : pitchAndRoll
{
	{
		gualzru:robot(40,40)
		floor:plane(220,40)
		gualzru->floor(lookTowards)
	}
	=>
	{
		gualzru:robot(40,40)
		floor:plane(260,40)
		gualzru->floor(lookPerpendicular)
	}
}

modelYaw : pitchAndRoll
{
	{
		gualzru:robot(40,40)
		floor:plane(260,40)
		gualzru->floor(lookPerpendicular)
	}
	=>
	{
		gualzru:robot(40,40)
		floor:floor(260,40)
		gualzru->floor(lookPerpendicular)
	}
}

lookFirstWall : pitchAndRoll
{
	{
		gualzru:robot(40,40)
		floor:floor(160,160)
		gualzru->floor(lookPerpendicular)
	}
	=>
	{
		floor:floor(180,160)
		w4:notWall(370,60)
		w3:notWall(270,160)
		w2:notWall(170,60)
		w1:notWall(50,160)
		gualzru:robot(50,40)
		gualzru->w1(looks)
		floor->w1(link)
		w1->w2(link)
		w2->w3(link)
		w3->w4(link)
	}
}

lookNextWall : pitchAndRoll
{
	{
		w2:notWall(270,40)
		w1:wall(160,120)
		gualzru:robot(40,40)
		gualzru->w1(looks)
		w1->w2(link)
	}
	=>
	{
		w2:notWall(230,40)
		w1:wall(120,120)
		gualzru:robot(40,40)
		gualzru->w2(looks)
		w1->w2(link)
	}
}

modelWall : pitchAndRoll
{
	{
		w2:notWall(310,40)
		w1:notWall(170,140)
		gualzru:robot(40,40)
		gualzru->w1(looks)
		w1->w2(link)
	}
	=>
	{
		w2:notWall(330,40)
		w1:wall(190,140)
		gualzru:robot(40,40)
		gualzru->w1(looks)
		w1->w2(link)
	}
}

modelLastWall : pitchAndRoll
{
	{
		floor:floor(40,160)
		robot:robot(180,40)
		w4:notWall(370,40)
		w3:wall(270,150)
		w2:wall(130,150)
		w1:wall(40,40)
		robot->w4(looks)
		floor->w1(link)
		w1->w2(link)
		w2->w3(link)
		w3->w4(link)
	}
	=>
	{
		w4:wall(360,40)
		floor:room(40,160)
		robot:robot(160,40)
		explored:explored(190,270)
		w3:wall(270,150)
		w2:wall(130,150)
		w1:wall(40,40)
		floor->w1(link)
		w1->w2(link)
		w2->w3(link)
		w3->w4(link)
		floor->explored(notFully)
	}
}

detectObstacle : pitchAndRoll
{
	{
		explored:explored(360,40)
		room:room(170,40)
		gualzru:robot(40,40)
		gualzru->room(in)
		room->explored(notFully)
	}
	=>
	{
		obstacle:obstacle(290,100)
		room:room(170,40)
		explored:explored(360,40)
		gualzru:robot(40,40)
		gualzru->room(in)
		obstacle->room(in)
		room->explored(notFully)
	}
}

approachObstacle : pitchAndRoll
{
	{
		obstacle:obstacle(300,40)
		room:room(170,110)
		gualzru:robot(40,40)
		gualzru->room(in)
		obstacle->room(in)
	}
	=>
	{
		obstacle:obstacle(300,40)
		room:room(170,110)
		gualzru:robot(40,40)
		gualzru->room(in)
		obstacle->room(in)
		gualzru->obstacle(closeLook)
	}
}

modelTable : pitchAndRoll
{
	{
		obstacle:obstacle(300,40)
		room:room(170,110)
		gualzru:robot(40,40)
		gualzru->room(in)
		obstacle->room(in)
		gualzru->obstacle(closeLook)
	}
	=>
	{
		obstacle:table(300,40)
		room:room(170,110)
		gualzru:robot(40,40)
		gualzru->room(in)
		obstacle->room(in)
		gualzru->obstacle(closeLook)
	}
}

detectObjectInTable : pitchAndRoll
{
	{
		table:table(300,40)
		room:room(170,110)
		gualzru:robot(40,40)
		gualzru->room(in)
		table->room(in)
		gualzru->table(closeLook)
	}
	=>
	{
		table:table(300,40)
		object:object(420,40)
		room:room(170,110)
		gualzru:robot(40,40)
		gualzru->room(in)
		table->room(in)
		gualzru->table(closeLook)
		object->table(in)
	}
}

modelMugInTable : pitchAndRoll
{
	{
		table:table(300,40)
		object:object(420,40)
		room:room(170,110)
		gualzru:robot(40,40)
		gualzru->room(in)
		table->room(in)
		object->table(in)
		gualzru->table(closeLook)
	}
	=>
	{
		table:table(300,40)
		object:mug(420,40)
		room:room(170,110)
		gualzru:robot(40,40)
		gualzru->room(in)
		table->room(in)
		object->table(in)
		gualzru->table(closeLook)
	}
}

considerTheRoomExplored : insertUnknownStuff
{
	{
		explored:explored(430,100)
		room:room(270,100)
		gualzru:robot(110,100)
		gualzru->room(in)
		room->explored(notFully)
	}
	=>
	{
		explored:explored(410,60)
		room:room(250,60)
		gualzru:robot(100,60)
		gualzru->room(in)
		room->explored(fully)
	}
}

