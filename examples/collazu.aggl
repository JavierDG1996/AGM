spacePattern=3
lineThickness=2.5
name=collazu
vertexDiameter=40
shortPattern=1
nodeThickness=2.5
longPattern=3
===
agents
{
pitchNRoll ( off enabled )
yaw ( off enabled )
saccade ( off downwards frontal firstWall nextWall smallRight specific )
distance ( off floor wall maintenance )
wander ( off enabled )
unknownFinder ( off floor table )
obstacleModeler ( off enabled )
objectModeler ( off enabled )
}
configurations{ pitchAndRoll lookUnknownFloor heightBehavior lookPerpendicularFloor yaw lookFirstWall modelWall lookNextWall maintainWallDistances insertUnknownStuff obstaclesSaccade none findSaccadic }
table
{
 enabled off off off off off off off
 off off downwards off off off off off
 off off off floor off off off off
 off off frontal off off off off off
 off enabled off off off off off off
 off enabled firstWall maintenance off off off off
 off off off wall off off off off
 off enabled nextWall maintenance off off off off
 off enabled off maintenance enabled off off off
 off enabled off maintenance enabled floor off off
 off enabled specific maintenance off off off off
 off off off off off off off off
 off enabled smallRight maintenance off off off off
}
===
modelGravity : pitchAndRoll
{
	{
		s:start(370,120)
	}
	=>
	{
		g:gravity(580,130)
		gualzru:robot(340,130)
		gualzru->g(link)
	}
}

lookFloor : pitchAndRoll
{
	{
		g:gravity(170,40)
		gualzru:robot(40,40)
		gualzru->g(link)
	}
	=>
	{
		g:gravity(230,40)
		gualzru:robot(40,40)
		gualzru->g(lookTowards)
	}
}

modelHeight : pitchAndRoll
{
	{
		g:gravity(270,40)
		gualzru:robot(40,40)
		gualzru->g(lookTowards)
	}
	=>
	{
		g:plane(290,40)
		gualzru:robot(40,40)
		gualzru->g(lookTowards)
		gualzru->g(in)
	}
}

lookPerpendicularFloor : pitchAndRoll
{
	{
		floor:plane(220,40)
		gualzru:robot(40,40)
		gualzru->floor(lookTowards)
	}
	=>
	{
		floor:plane(260,40)
		gualzru:robot(40,40)
		gualzru->floor(lookPerpendicular)
	}
}

modelYaw : pitchAndRoll
{
	{
		floor:plane(260,40)
		gualzru:robot(40,40)
		gualzru->floor(lookPerpendicular)
	}
	=>
	{
		floor:floor(260,40)
		gualzru:robot(40,40)
		gualzru->floor(lookPerpendicular)
	}
}

lookFirstWall : pitchAndRoll
{
	{
		floor:floor(160,160)
		gualzru:robot(40,40)
		gualzru->floor(lookPerpendicular)
	}
	=>
	{
		floor:floor(180,160)
		w4:notWall(370,60)
		w3:notWall(270,160)
		w2:notWall(170,60)
		w1:notWall(50,160)
		gualzru:robot(50,40)
		gualzru->w1(looks)
		floor->w1(link)
		w1->w2(link)
		w2->w3(link)
		w3->w4(link)
	}
}

lookNextWall : pitchAndRoll
{
	{
		w2:notWall(270,40)
		w1:wall(160,120)
		gualzru:robot(40,40)
		gualzru->w1(looks)
		w1->w2(link)
	}
	=>
	{
		w2:notWall(230,40)
		w1:wall(120,120)
		gualzru:robot(40,40)
		gualzru->w2(looks)
		w1->w2(link)
	}
}

modelWall : pitchAndRoll
{
	{
		w2:notWall(310,40)
		w1:notWall(170,140)
		gualzru:robot(40,40)
		gualzru->w1(looks)
		w1->w2(link)
	}
	=>
	{
		w2:notWall(330,40)
		w1:wall(190,140)
		gualzru:robot(40,40)
		gualzru->w1(looks)
		w1->w2(link)
	}
}

modelLastWall : pitchAndRoll
{
	{
		floor:floor(40,160)
		robot:robot(420,40)
		w4:notWall(270,40)
		w3:wall(270,150)
		w2:wall(130,150)
		w1:wall(40,40)
		robot->w4(looks)
		floor->w1(link)
		w1->w2(link)
		w2->w3(link)
		w3->w4(link)
	}
	=>
	{
		floor:room(40,160)
		is:is(390,160)
		unlocked:unlocked(550,160)
		robot:robot(390,40)
		w4:wall(280,40)
		w3:wall(270,150)
		w2:wall(130,150)
		w1:wall(40,40)
		floor->w1(link)
		w1->w2(link)
		w2->w3(link)
		w3->w4(link)
		robot->is(link)
		is->unlocked(link)
	}
}

lockRobot : none
{
	{
		robot:robot(250,160)
		unlocked:unlocked(410,160)
		robot->unlocked(is)
	}
	=>
	{
		robot:robot(250,160)
		unlocked:unlocked(410,160)
		robot->locked(is)
	}
}

saccadeFinishesInspectionMovement : none
{
	{
		robot:robot(250,160)
		room:room(250,160)
		view:view(250,160)
		locked:locked(410,160)
		robot->locked(is)
	}
	=>
	{
		robot:robot(250,160)
		room:room(250,160)
		view:view(250,160)
		locked:locked(410,160)
		robot->locked(is)
	}
}

addObstacle : findObstacles
{
	{
		robot:robot(250,160)
		locked:locked(410,160)
		room:room(250,160)
		view:view(410,160)
		robot->locked(is)
		robot->view(has)
		robot->room(in)
		view->room(uncovered)
	}
	=>
	{
		robot:robot(250,160)
		locked:locked(410,160)
		room:room(250,160)
		view:view(410,160)
		obstacle:obstacle(410,160)
		robot->locked(is)
		robot->view(has)
		robot->room(in)
		obstacle->room(in)
		view->room(uncovered)
	}
}

boringRoom : none
{
	{
		robot:robot(250,160)
		room:room(250,160)
		robot->room(in)
	}
	=>
	{
		robot:robot(250,160)
		room:room(250,160)
		robot->room(in)
		robot->room(observed)
	}
}

