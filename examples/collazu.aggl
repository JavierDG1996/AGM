spacePattern=3
lineThickness=2
name=collazu
vertexDiameter=40
shortPattern=1
nodeThickness=2
longPattern=3
===
modelGravity : active(1)
{
	{
		s:start(370,120)
	}
	=>
	{
		g:gravity(580,130)
		gualzru:robot(340,130)
		gualzru->g(link)
	}
}

lookFloor : active(1)
{
	{
		g:gravity(170,40)
		gualzru:robot(40,40)
		gualzru->g(link)
	}
	=>
	{
		g:gravity(230,40)
		gualzru:robot(40,40)
		gualzru->g(lookTowards)
	}
}

modelHeight : active(1)
{
	{
		g:gravity(270,40)
		gualzru:robot(40,40)
		gualzru->g(lookTowards)
	}
	=>
	{
		g:plane(290,40)
		gualzru:robot(40,40)
		gualzru->g(lookTowards)
		gualzru->g(in)
	}
}

lookPerpendicularFloor : active(1)
{
	{
		gualzru:robot(40,40)
		floor:plane(220,40)
		gualzru->floor(lookTowards)
	}
	=>
	{
		gualzru:robot(40,40)
		floor:plane(260,40)
		gualzru->floor(lookPerpendicular)
	}
}

modelYaw : active(1)
{
	{
		gualzru:robot(40,40)
		floor:plane(260,40)
		gualzru->floor(lookPerpendicular)
	}
	=>
	{
		gualzru:robot(40,40)
		floor:floor(260,40)
		gualzru->floor(lookPerpendicular)
	}
}

lookFirstWall : active(1)
{
	{
		gualzru:robot(40,40)
		floor:floor(160,160)
		gualzru->floor(lookPerpendicular)
	}
	=>
	{
		floor:floor(180,160)
		w4:notWall(370,60)
		w3:notWall(270,160)
		w2:notWall(170,60)
		w1:notWall(50,160)
		gualzru:robot(50,40)
		gualzru->w1(looks)
		floor->w1(link)
		w1->w2(link)
		w2->w3(link)
		w3->w4(link)
	}
}

lookNextWall : active(1)
{
	{
		w2:notWall(270,40)
		w1:wall(160,120)
		gualzru:robot(40,40)
		gualzru->w1(looks)
		w1->w2(link)
	}
	=>
	{
		w2:notWall(230,40)
		w1:wall(120,120)
		gualzru:robot(40,40)
		gualzru->w2(looks)
		w1->w2(link)
	}
}

modelWall : active(1)
{
	{
		w2:notWall(310,40)
		w1:notWall(170,140)
		gualzru:robot(40,40)
		gualzru->w1(looks)
		w1->w2(link)
	}
	=>
	{
		w2:notWall(330,40)
		w1:wall(190,140)
		gualzru:robot(40,40)
		gualzru->w1(looks)
		w1->w2(link)
	}
}

modelLastWall : active(1)
{
	{
		floor:floor(40,160)
		robot:robot(420,40)
		w4:notWall(270,40)
		w3:wall(270,150)
		w2:wall(130,150)
		w1:wall(40,40)
		robot->w4(looks)
		floor->w1(link)
		w1->w2(link)
		w2->w3(link)
		w3->w4(link)
	}
	=>
	{
		lock:unlocked(520,260)
		floor:room(40,160)
		robot:robot(430,40)
		w4:wall(280,40)
		w3:wall(270,150)
		w2:wall(130,150)
		w1:wall(40,40)
		view:view(300,260)
		floor->w1(link)
		w1->w2(link)
		w2->w3(link)
		w3->w4(link)
		robot->lock(isLockedBy)
		view->floor(uncovered)
		robot->view(has)
	}
}

lockRobot : active(1)
{
	{
		robot:robot(250,160)
		lock:unlocked(410,160)
		robot->lock(isLockedBy)
	}
	=>
	{
		lock:locked(410,160)
		robot:robot(250,160)
		robot->lock(isLockedBy)
	}
}

addObstacle : active(1)
{
	{
		view:view(210,180)
		lock:locked(540,50)
		room:room(440,180)
		robot:robot(330,50)
		robot->lock(isLockedBy)
		robot->view(has)
		robot->room(in)
		view->room(uncovered)
	}
	=>
	{
		view:view(160,180)
		obstacle:obstacle(560,180)
		lock:locked(440,60)
		room:room(380,180)
		robot:robot(270,60)
		robot->lock(isLockedBy)
		robot->view(has)
		robot->room(in)
		obstacle->room(in)
		view->room(uncovered)
	}
}

markViewCovered : active(1)
{
	{
		view:view(210,180)
		lock:locked(540,50)
		room:room(440,180)
		robot:robot(330,50)
		robot->lock(isLockedBy)
		robot->view(has)
		robot->room(in)
		view->room(uncovered)
	}
	=>
	{
		view:view(160,180)
		lock:unlocked(440,60)
		room:room(380,180)
		robot:robot(270,60)
		robot->lock(isLockedBy)
		robot->view(has)
		robot->room(in)
		view->room(covered)
	}
}

saccadeFinishesInspectionMovement : active(1)
{
	{
		lock:locked(470,100)
		view:view(390,230)
		room:room(170,230)
		robot:robot(290,100)
		robot->lock(isLockedBy)
		robot->room(in)
		robot->view(has)
		view->room(covered)
	}
	=>
	{
		lock:unlocked(500,90)
		view:view(410,220)
		room:room(200,220)
		robot:robot(300,90)
		robot->lock(isLockedBy)
		robot->room(in)
		robot->view(has)
		view->room(uncovered)
	}
}

markRoomObserved : active(1)
{
	{
		view:view(210,180)
		lock:locked(540,50)
		room:room(440,180)
		robot:robot(330,50)
		robot->lock(isLockedBy)
		robot->view(has)
		robot->room(in)
		view->room(uncovered)
	}
	=>
	{
		view:view(160,180)
		lock:locked(440,60)
		room:room(380,180)
		robot:robot(270,60)
		robot->lock(isLockedBy)
		robot->view(has)
		robot->room(in)
		view->room(covered)
	}
}

boringRoom : active(1)
{
	{
		lock:locked(470,100)
		view:view(390,230)
		room:room(170,230)
		robot:robot(290,100)
		robot->lock(isLockedBy)
		robot->room(in)
		robot->view(has)
		view->room(covered)
	}
	=>
	{
		lock:unlocked(500,90)
		view:view(410,220)
		room:room(200,220)
		robot:robot(300,90)
		robot->lock(isLockedBy)
		robot->room(in)
		robot->room(observed)
		robot->view(has)
		view->room(uncovered)
	}
}

