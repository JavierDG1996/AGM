spacePattern=3
lineThickness=2
name=grammarGualzru
vertexDiameter=68
shortPattern=1
nodeThickness=2
longPattern=3
===
agents
{
	pitchNRoll ( off enabled )
	yaw ( off enabled )
	saccade ( off downwards frontal firstWall nextWall smallRight specific)
	distance ( off floor wall maintenance )
	wander ( off enabled)
	unknownFinder (off floor table)
	obstacleModeler ( off enabled )
	objectModeler ( off enabled )
}
configurations
{
	pitchAndRoll
	lookUnknownFloor
	heightBehavior
	lookPerpendicularFloor
	yaw
	lookFirstWall
	modelWall
	lookNextWall
	maintainWallDistances
	insertUnknownStuff
	obstaclesSaccade
	none
	findSaccadic
}
table
{
	enabled off      off         off         off     off   off off
	off     off      downwards   off         off     off   off off
	off     off      off         floor       off     off   off off
	off     off      frontal     off         off     off   off off
	off     enabled  off         off         off     off   off off
	off     enabled  firstWall   maintenance off     off   off off
	off     off      off         wall        off     off   off off
	off     enabled  nextWall    maintenance off     off   off off
	off     enabled  off         maintenance enabled off   off off
	off     enabled  off         maintenance enabled floor off off
	off     enabled  specific    maintenance off     off   off off
	off     off      off         off         off     off   off off
	off     enabled  smallRight  maintenance off     off   off off
}
===
modelGravity : pitchAndRoll
{
	{
		s:start(40,40)
	}
	=>
	{
		g:gravity(180,40)
		gualzru:robot(40,40)
		gualzru->g(link)
	}
}

lookFloor : pitchAndRoll
{
	{
		g:gravity(170,40)
		gualzru:robot(40,40)
		gualzru->g(link)
	}
	=>
	{
		g:gravity(230,40)
		gualzru:robot(40,40)
		gualzru->g(lookTowards)
	}
}

modelHeight : pitchAndRoll
{
	{
		g:gravity(270,40)
		gualzru:robot(40,40)
		gualzru->g(lookTowards)
	}
	=>
	{
		g:plane(290,40)
		gualzru:robot(40,40)
		gualzru->g(lookTowards)
		gualzru->g(in)
	}
}

lookPerpendicularFloor : pitchAndRoll
{
	{
		gualzru:robot(40,40)
		floor:plane(220,40)
		gualzru->floor(lookTowards)
	}
	=>
	{
		gualzru:robot(40,40)
		floor:plane(260,40)
		gualzru->floor(lookPerpendicular)
	}
}

modelYaw : pitchAndRoll
{
	{
		gualzru:robot(40,40)
		floor:plane(260,40)
		gualzru->floor(lookPerpendicular)
	}
	=>
	{
		gualzru:robot(40,40)
		floor:floor(260,40)
		gualzru->floor(lookPerpendicular)
	}
}

lookFirstWall : pitchAndRoll
{
	{
		gualzru:robot(40,40)
		floor:floor(160,160)
		gualzru->floor(lookPerpendicular)
	}
	=>
	{
		floor:floor(180,160)
		w4:notWall(370,60)
		w3:notWall(270,160)
		w2:notWall(170,60)
		w1:notWall(50,160)
		gualzru:robot(50,40)
		gualzru->w1(looks)
		floor->w1(link)
		w1->w2(link)
		w2->w3(link)
		w3->w4(link)
	}
}

lookNextWall : pitchAndRoll
{
	{
		w2:notWall(270,40)
		w1:wall(160,120)
		gualzru:robot(40,40)
		gualzru->w1(looks)
		w1->w2(link)
	}
	=>
	{
		w2:notWall(230,40)
		w1:wall(120,120)
		gualzru:robot(40,40)
		gualzru->w2(looks)
		w1->w2(link)
	}
}

modelWall : pitchAndRoll
{
	{
		w2:notWall(310,40)
		w1:notWall(170,140)
		gualzru:robot(40,40)
		gualzru->w1(looks)
		w1->w2(link)
	}
	=>
	{
		w2:notWall(330,40)
		w1:wall(190,140)
		gualzru:robot(40,40)
		gualzru->w1(looks)
		w1->w2(link)
	}
}

modelLastWall : pitchAndRoll
{
	{
		floor:floor(40,160)
		robot:robot(180,40)
		w4:notWall(370,40)
		w3:wall(270,150)
		w2:wall(130,150)
		w1:wall(40,40)
		robot->w4(looks)
		floor->w1(link)
		w1->w2(link)
		w2->w3(link)
		w3->w4(link)
	}
	=>
	{
		floor:room(40,160)
		robot:robot(160,40)
		w4:wall(360,40)
		w3:wall(270,150)
		w2:wall(130,150)
		w1:wall(40,40)
		is:is(180,140)
		unlocked:unlocked(250,140)
		floor->w1(link)
		w1->w2(link)
		w2->w3(link)
		w3->w4(link)
		robot->is(link)
		is->unlocked(link)
	}
}

findStuffSaccadic : findSaccadic
{
	{
		room:room(40,160)
		robot:robot(180,40)
		is:is(270,40)
		unlocked:unlocked(370,40)
		robot->room(in)
		robot->is(linked)
		is->unlocked(linked)
	}
	=>
	{
		room:room(40,160)
		robot:robot(180,40)
		is:is(270,40)
		locked:locked(370,40)
		looking:looking(370,40)
		robot->room(in)
		robot->is(linked)
		is->locked(linked)
		is->looking(linked)
	}
}

findStuffSaccadicEnds : none
{
	{
		floor:floor(40,160)
		robot:robot(180,40)
		w4:notWall(370,40)
		w3:wall(270,150)
		w2:wall(130,150)
		w1:wall(40,40)
		robot->w4(looks)
		floor->w1(link)
		w1->w2(link)
		w2->w3(link)
		w3->w4(link)
	}
	=>
	{
		floor:room(40,160)
		robot:robot(160,40)
		w4:wall(360,40)
		w3:wall(270,150)
		w2:wall(130,150)
		w1:wall(40,40)
		floor->w1(link)
		w1->w2(link)
		w2->w3(link)
		w3->w4(link)
	}
}

detectObstacle : pitchAndRoll
{
	{
		room:room(170,110)
		gualzru:robot(40,40)
		gualzru->room(in)
	}
	=>
	{
		obstacle:obstacle(300,40)
		room:room(170,110)
		gualzru:robot(40,40)
		gualzru->room(in)
		obstacle->room(in)
	}
}

approachObstacle : pitchAndRoll
{
	{
		obstacle:obstacle(300,40)
		room:room(170,110)
		gualzru:robot(40,40)
		gualzru->room(in)
		obstacle->room(in)
	}
	=>
	{
		obstacle:obstacle(300,40)
		room:room(170,110)
		gualzru:robot(40,40)
		gualzru->room(in)
		obstacle->room(in)
		gualzru->obstacle(closeLook)
	}
}

modelTable : pitchAndRoll
{
	{
		obstacle:obstacle(300,40)
		room:room(170,110)
		gualzru:robot(40,40)
		gualzru->room(in)
		obstacle->room(in)
		gualzru->obstacle(closeLook)
	}
	=>
	{
		obstacle:table(300,40)
		room:room(170,110)
		gualzru:robot(40,40)
		gualzru->room(in)
		obstacle->room(in)
		gualzru->obstacle(closeLook)
	}
}

detectObjectInTable : pitchAndRoll
{
	{
		table:table(300,40)
		room:room(170,110)
		gualzru:robot(40,40)
		gualzru->room(in)
		table->room(in)
		gualzru->table(closeLook)
	}
	=>
	{
		table:table(300,40)
		object:object(420,40)
		room:room(170,110)
		gualzru:robot(40,40)
		gualzru->room(in)
		table->room(in)
		gualzru->table(closeLook)
		object->table(in)
	}
}

modelMugInTable : pitchAndRoll
{
	{
		table:table(300,40)
		object:object(420,40)
		room:room(170,110)
		gualzru:robot(40,40)
		gualzru->room(in)
		table->room(in)
		object->table(in)
		gualzru->table(closeLook)
	}
	=>
	{
		table:table(300,40)
		object:mug(420,40)
		room:room(170,110)
		gualzru:robot(40,40)
		gualzru->room(in)
		table->room(in)
		object->table(in)
		gualzru->table(closeLook)
	}
}

