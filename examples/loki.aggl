spacePattern=3
lineThickness=2.5
name=lokito
vertexDiameter=40
shortPattern=1
nodeThickness=2.5
longPattern=3
===
agents
{
ballTracker ( off track )
handApproacher ( off touch restPosition)
}
configurations{ resting beCool goTouchTheBall touchingTheBall goRest }
table
{
 off off
 track off
 track touch
 track off
 track restPosition
}
===
init : resting
{
	{
		S:startsymbol(100,100)
	}
	=>
	{
		loki:robot(100,100)
		status:status(100,250)
		loki->status(exists)
	}
}

ballFound : beCool
{
	{
		loki:robot(100,100)
	}
	=>
	{
		loki:robot(100,100)
		ball:ball(300,100)
		loki->ball(sees)
	}
}

ballLost : beCool
{
	{
		loki:robot(100,100)
		ball:ball(300,100)
		loki->ball(sees)
	}
	=>
	{
		loki:robot(100,100)
	}
}

ballCentered : beCool
{
	{
		loki:robot(100,100)
		ball:ball(300,100)
		loki->ball(sees)
	}
	=>
	{
		loki:robot(100,100)
		ball:ball(300,100)
		loki->ball(sees)
		loki->ball(fixates)
	}
}

ballNotCentered : beCool
{
	{
		loki:robot(100,100)
		ball:ball(300,100)
		loki->ball(sees)
		loki->ball(fixates)
	}
	=>
	{
		loki:robot(100,100)
		ball:ball(300,100)
		loki->ball(sees)
	}
}

ballTouched : goTouchTheBall
{
	{
		loki:robot(100,100)
		ball:ball(300,100)
		loki->ball(sees)
	}
	=>
	{
		loki:robot(100,100)
		ball:ball(300,100)
		loki->ball(sees)
		loki->ball(touches)
	}
}

ballNotTouched : goRest
{
	{
		loki:robot(100,100)
		ball:ball(300,100)
		loki->ball(sees)
		loki->ball(touches)
	}
	=>
	{
		loki:robot(100,100)
		ball:ball(300,100)
		loki->ball(sees)
	}
}

setRest : goRest
{
	{
		loki:robot(100,100)
		status:status(100,250)
		loki->status(exists)
	}
	=>
	{
		loki:robot(100,100)
		status:status(100,250)
		loki->status(exists)
		loki->status(rest)
	}
}

unsetRest : goTouchTheBall
{
	{
		loki:robot(100,100)
		status:status(100,250)
		loki->status(exists)
		loki->status(rest)
	}
	=>
	{
		loki:robot(100,100)
		status:status(100,250)
		loki->status(exists)
	}
}

