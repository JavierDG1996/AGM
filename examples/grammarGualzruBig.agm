spacePattern=3
lineThickness=2
name=grammarGualzruBig
vertexDiameter=74
shortPattern=1
nodeThickness=2
longPattern=3

modelGravity
{
	{
		s:start(40,40)
	}
	=>
	{
		g:gravity(190,40)
		gualzru:robot(40,40)
		gualzru->g(link)
	}
}

lookFloor
{
	{
		g:gravity(190,40)
		gualzru:robot(40,40)
		gualzru->g(link)
	}
	=>
	{
		g:gravity(250,40)
		gualzru:robot(40,40)
		gualzru->g(lookTowards)
	}
}

modelHeight
{
	{
		g:gravity(260,40)
		gualzru:robot(40,40)
		gualzru->g(lookTowards)
	}
	=>
	{
		g:plane(260,40)
		gualzru:robot(40,40)
		gualzru->g(lookTowards)
		gualzru->g(in)
	}
}

lookPerpendicularFloor
{
	{
		floor:plane(250,40)
		gualzru:robot(40,40)
		gualzru->floor(lookTowards)
	}
	=>
	{
		floor:plane(290,40)
		gualzru:robot(40,40)
		gualzru->floor(lookPerpendicular)
	}
}

modelYaw
{
	{
		floor:plane(300,40)
		gualzru:robot(40,40)
		gualzru->floor(lookPerpendicular)
	}
	=>
	{
		floor:floor(300,40)
		gualzru:robot(40,40)
		gualzru->floor(lookPerpendicular)
	}
}

lookFirstWall
{
	{
		floor:floor(290,40)
		gualzru:robot(40,40)
		gualzru->floor(lookPerpendicular)
	}
	=>
	{
		floor:floor(210,40)
		w4:notWall(390,40)
		w3:notWall(390,180)
		w2:notWall(210,180)
		w1:notWall(40,180)
		gualzru:robot(40,40)
		gualzru->w1(looks)
		floor->w1(link)
		w1->w2(link)
		w2->w3(link)
		w3->w4(link)
	}
}

lookNextWall
{
	{
		w2:notWall(350,40)
		w1:wall(200,40)
		gualzru:robot(40,40)
		gualzru->w1(looks)
		w1->w2(link)
	}
	=>
	{
		w2:notWall(210,40)
		w1:wall(360,40)
		gualzru:robot(40,40)
		gualzru->w2(looks)
		w1->w2(link)
	}
}

modelWall
{
	{
		w2:notWall(310,40)
		w1:notWall(170,140)
		gualzru:robot(40,40)
		gualzru->w1(looks)
		w1->w2(link)
	}
	=>
	{
		w2:notWall(330,40)
		w1:wall(190,140)
		gualzru:robot(40,40)
		gualzru->w1(looks)
		w1->w2(link)
	}
}

modelLastWall
{
	{
		floor:floor(40,170)
		robot:robot(200,40)
		w4:notWall(370,40)
		w3:wall(370,170)
		w2:wall(200,170)
		w1:wall(40,40)
		robot->w4(looks)
		floor->w1(link)
		w1->w2(link)
		w2->w3(link)
		w3->w4(link)
	}
	=>
	{
		floor:room(40,170)
		robot:robot(200,40)
		w4:wall(360,40)
		w3:wall(360,170)
		w2:wall(200,170)
		w1:wall(40,40)
		floor->w1(link)
		w1->w2(link)
		w2->w3(link)
		w3->w4(link)
	}
}

detectObstacle
{
	{
		room:room(170,110)
		gualzru:robot(40,40)
		gualzru->room(in)
	}
	=>
	{
		obstacle:obstacle(300,40)
		room:room(170,110)
		gualzru:robot(40,40)
		gualzru->room(in)
		obstacle->room(in)
	}
}

approachObstacle
{
	{
		obstacle:obstacle(300,40)
		room:room(170,110)
		gualzru:robot(40,40)
		gualzru->room(in)
		obstacle->room(in)
	}
	=>
	{
		obstacle:obstacle(300,40)
		room:room(170,110)
		gualzru:robot(40,40)
		gualzru->room(in)
		obstacle->room(in)
		gualzru->obstacle(closeLook)
	}
}

modelTable
{
	{
		obstacle:obstacle(300,40)
		room:room(170,110)
		gualzru:robot(40,40)
		gualzru->room(in)
		obstacle->room(in)
		gualzru->obstacle(closeLook)
	}
	=>
	{
		obstacle:table(300,40)
		room:room(170,110)
		gualzru:robot(40,40)
		gualzru->room(in)
		obstacle->room(in)
		gualzru->obstacle(closeLook)
	}
}

detectObjectInTable
{
	{
		table:table(300,40)
		room:room(170,110)
		gualzru:robot(40,40)
		gualzru->room(in)
		table->room(in)
		gualzru->table(closeLook)
	}
	=>
	{
		table:table(300,40)
		object:object(430,40)
		room:room(170,110)
		gualzru:robot(40,40)
		gualzru->room(in)
		table->room(in)
		gualzru->table(closeLook)
		object->table(in)
	}
}

modelMugInTable
{
	{
		table:table(300,40)
		object:object(430,40)
		room:room(170,110)
		gualzru:robot(40,40)
		gualzru->room(in)
		table->room(in)
		object->table(in)
		gualzru->table(closeLook)
	}
	=>
	{
		table:table(300,40)
		object:mug(430,40)
		room:room(170,110)
		gualzru:robot(40,40)
		gualzru->room(in)
		table->room(in)
		object->table(in)
		gualzru->table(closeLook)
	}
}

